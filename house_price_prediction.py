# -*- coding: utf-8 -*-
"""House price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a0kJBQI-_8w35CsQJC36vgZD-ZljxHuk
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
# %matplotlib inline

!dir | findstr -1 housing.csv

from google.colab import files
uploaded = files.upload()

import io

HouseDF = pd.read_csv(io.BytesIO(uploaded['housing.csv']))

HouseDF.head()

HouseDF.info()

HouseDF['ocean_proximity'].value_counts()

HouseDF.describe()

HouseDF.hist(bins=50, figsize=(25, 10))
plt.show()

# median income because this is the most important feature that determines housing prices

HouseDF['median_income'].hist()

# dividing the income category to further limit the income category using the numpy ceil function
HouseDF['income_cat'] = np.ceil(HouseDF['median_income'] / 1.5)
# categorizing values above the 5th category as 5th category
HouseDF['income_cat'].where(HouseDF['income_cat'] < 5, other=5.0, inplace=True)

HouseDF.head(5)

from sklearn.model_selection import StratifiedShuffleSplit

split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=29)

for train_index, test_index in split.split(HouseDF, HouseDF['income_cat']):
    strat_train_set = HouseDF.loc[train_index]
    strat_test_set = HouseDF.loc[test_index]

HouseDF['income_cat'].value_counts() / len(HouseDF)

strat_test_set['income_cat'].value_counts() / len(strat_test_set)

# The above is stratefied sampling to maintain proportion
# This is done because the feature space are less and also because it is a mid sized dataset and we don't want to miss out any class

# Experimenting with random sampling

from sklearn.model_selection import train_test_split

train_set, test_set = train_test_split(HouseDF, test_size=0.2, random_state=29)

def income_cat_proportions(data):
    return data['income_cat'].value_counts() / len(data)

comparing_props = pd.DataFrame({
    "Overall Props": income_cat_proportions(HouseDF),
    "Random": income_cat_proportions(test_set),
    "Stratified": income_cat_proportions(strat_test_set)
}).sort_index()

comparing_props["random %error"] = 100 * comparing_props["Random"] / comparing_props["Overall Props"] - 100
comparing_props["strat. %error"] = 100 * comparing_props["Stratified"] / comparing_props["Overall Props"] - 100
comparing_props

for items in (strat_train_set, strat_test_set):
    items.drop("income_cat", axis=1, inplace=True)

HouseDF = strat_train_set.copy()

HouseDF.plot(kind="scatter", x="longitude", y="latitude", alpha=0.4,
            s=HouseDF["population"]/100, label="population", figsize=(12,8),
            c="median_house_value", cmap=plt.get_cmap("jet"), sharex=False)

plt.legend()

# Looking for correlations uning pearson's distance correlation equation
corr_matrix = HouseDF.corr()

corr_matrix["median_house_value"].sort_values(ascending=False)

# It is always between -1 (less correlated) and 1 (highly correlated)

# trying out scatter plot in A vs B fashion
# problem with this is that for N features, there will be N^2 plots

imp_attributes = ["median_house_value", "median_income", "total_rooms", "housing_median_age"]

from pandas.plotting import scatter_matrix

scatter_matrix(HouseDF[imp_attributes], figsize=(12, 8))

HouseDF.plot(kind="scatter", x="median_income", y="median_house_value", alpha=0.1)
plt.axis([0, 16, 0, 550000])

## Feature engineering

HouseDF["bedrooms_per_room"] = HouseDF["total_bedrooms"]/HouseDF["total_rooms"]
HouseDF["population_per_household"] = HouseDF["population"]/HouseDF["households"]
HouseDF["rooms_per_household"] = HouseDF["total_rooms"]/HouseDF["households"]

corr_matrix = HouseDF.corr()
corr_matrix["median_house_value"].sort_values(ascending=False)

## Observation
# The new 'bedroom_per_room' is highly correlated but in a reciprocative way to the 'median_house_value', so the houses with the lesser bedroom/room ratio will be more expensive.

HouseDF.plot(kind="scatter", x="rooms_per_household", y="median_house_value", alpha=0.2)
plt.axis([0, 5, 0, 520000])
plt.show()

HouseDF.describe()

## Preparing the data for ML algorithym

HouseDF = strat_train_set.drop("median_house_value", axis=1)
HouseDF_labels = strat_train_set["median_house_value"].copy()

# Cleaning up
HouseDF.info()

# When calculating imputing value
sample_incomplete_rows = HouseDF[HouseDF.isnull().any(axis=1)].head()

median = HouseDF["total_bedrooms"].median()
sample_incomplete_rows["total_bedrooms"].fillna(median, inplace=True)
sample_incomplete_rows

# Using scikit-learn's imputer class
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy="median")

HouseDF_num = HouseDF.drop("ocean_proximity", axis=1)

imputer.fit(HouseDF_num)

# Imputer computes across all the attributes, so to see this across all the attributes just call statistics_
imputer.statistics_

# To cross verify
HouseDF_num.median().values

# Using the imputer created above, transforming the train set by replacing the missing values by the learned medians
x = imputer.transform(HouseDF_num)

HouseDF_tr = pd.DataFrame(x, columns=HouseDF_num.columns)

# Cross check for missing values

HouseDF_tr[HouseDF_tr.isnull().any(axis=1)].head()

HouseDF_tr.head()

## Handling categorical values

HouseDF_cat = HouseDF["ocean_proximity"]
HouseDF_cat.head(10)

# Looking into pandas's own factorize() method to convert them into categorical features

HouseDF_cat_encoded, HouseDF_categories = HouseDF_cat.factorize()

HouseDF_cat_encoded[:10]

HouseDF_categories

# Using sci-kit learn's onehotencoder

from sklearn.preprocessing import OneHotEncoder

encoder = OneHotEncoder()
HouseDF_cat_1hot = encoder.fit_transform(HouseDF_cat_encoded.reshape(-1, 1))

HouseDF_cat_1hot

# Changing it from a sparse matrix to a dense array

HouseDF_cat_1hot.toarray()

## Custom transformations

from sklearn.base import BaseEstimator, TransformerMixin
# column indexes
rooms_ix, bedrooms_ix, population_ix, household_ix = 3, 4, 5, 6

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    
    def __init__(self, add_bedrooms_per_room =True):
        self.add_bedrooms_per_room = add_bedrooms_per_room
        
    def fit(self, X, y=None):
        return self # do nothing here
    
    def transform(self, X, y=None):
        rooms_per_household = X[:, rooms_ix] / X[:, household_ix]
        population_per_household = X[:, population_ix] / X[:, household_ix]
        
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]
        else:
            return np.c_[X, rooms_per_household, population_per_household]

attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)
HouseDF_extra_attribs = attr_adder.transform(HouseDF.values)

HouseDF_extra_attribs = pd.DataFrame(HouseDF_extra_attribs, columns=list(HouseDF.columns)+["rooms_per_household", 
                                                                                           "population_per_household"])
HouseDF_extra_attribs.head()

## Setting up pipeline for all the preprocessings

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

num_pipeline = Pipeline([
    ("imputer", SimpleImputer(strategy="median")),
    ("attribs_adder", CombinedAttributesAdder()),
    ("std_scaler", StandardScaler())
])

HouseDF_num_tr = num_pipeline.fit_transform(HouseDF_num)
HouseDF_num_tr

class DataFrameSelector(BaseEstimator, TransformerMixin):
    
    def __init__(self, attribute_names):
        self.attribute_names = attribute_names
     
    def fit(self, X, y=None):
        return self # do nothing
    
    def transform(self, X, y=None):
        return X[self.attribute_names].values

# Complete Pipeline

num_attribs = list(HouseDF_num.columns)
cat_attribs = ["ocean_proximity"]

num_pipeline = Pipeline([
    ("selector", DataFrameSelector(num_attribs)),
    ("imputer", SimpleImputer(strategy="median")),
    ("attribs_adder", CombinedAttributesAdder()),
    ("std_scaler", StandardScaler())
])

cat_pipeline =Pipeline([
    ("selector", DataFrameSelector(cat_attribs)),
    ("cat_encoder", OneHotEncoder(sparse=False))
])

from sklearn.pipeline import FeatureUnion

full_pipeline = FeatureUnion(transformer_list=[
    ("num_pipeline", num_pipeline),
    ("cat_pipeline", cat_pipeline)
])

HouseDF_prepared = full_pipeline.fit_transform(HouseDF)
HouseDF_prepared

## Selecting and training models

from sklearn.linear_model import LinearRegression

lin_reg = LinearRegression()
lin_reg.fit(HouseDF_prepared, HouseDF_labels)

# Trying the whole pipeline on a few training instances

some_data = HouseDF.iloc[:5]
some_labels = HouseDF_labels.iloc[:5]

some_data_prepared = full_pipeline.transform(some_data)

print("Prediction: ", lin_reg.predict(some_data_prepared))
print("Actual Labels: ", list(some_labels))

from sklearn.metrics import mean_squared_error
HouseDF_predictions = lin_reg.predict(HouseDF_prepared)

lin_mse = mean_squared_error(HouseDF_labels, HouseDF_predictions)
lin_rmse = np.sqrt(lin_mse)
lin_rmse

from sklearn.tree import DecisionTreeRegressor

tree_reg = DecisionTreeRegressor()
tree_reg.fit(HouseDF_prepared, HouseDF_labels)

HouseDF_predictions = tree_reg.predict(HouseDF_prepared)

tree_mse = mean_squared_error(HouseDF_labels, HouseDF_predictions)
tree_rmse = np.sqrt(tree_mse)
tree_rmse

### Cross validation

from sklearn.model_selection import cross_val_score

scores = cross_val_score(tree_reg, HouseDF_prepared, HouseDF_labels, cv=10, scoring="neg_mean_squared_error")

tree_rmse_scores = np.sqrt(-scores)

def display_scores(scores):
    print("scores: scores")
    print("mean: ", scores.mean())
    print("std deviation: ", scores.std)

display_scores(tree_rmse_scores)

lin_scores = cross_val_score(lin_reg, HouseDF_prepared, HouseDF_labels, cv=10, scoring="neg_mean_squared_error")

lin_rmse_scores = np.sqrt(-lin_scores)

display_scores(lin_rmse_scores)

from sklearn.ensemble import RandomForestRegressor

forest_reg = RandomForestRegressor(random_state=29)
forest_reg.fit(HouseDF_prepared, HouseDF_labels)

HouseDF_predictions = forest_reg.predict(HouseDF_prepared)

forest_scores = cross_val_score(lin_reg, HouseDF_prepared, HouseDF_labels, cv=10, scoring="neg_mean_squared_error")

forest_rmse_scores = np.sqrt(-forest_scores)

display_scores(forest_rmse_scores)

## Finetuning model

from sklearn.model_selection import GridSearchCV

param_grid = [
              {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},
              {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]}
]

rf_reg = RandomForestRegressor()

grid_search = GridSearchCV(rf_reg, param_grid, cv=5, scoring="neg_mean_squared_error")

grid_search.fit(HouseDF_prepared, HouseDF_labels)

# to get the best combo of hyperparameters
grid_search.best_params_

# direct best estimators 

grid_search.best_estimator_

cv_res = grid_search.cv_results_

for mean_score, params in zip(cv_res["mean_test_score"], cv_res["params"]):
  print(np.sqrt(-mean_score), params)

pd.DataFrame(grid_search.cv_results_)

